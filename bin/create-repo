#!/usr/bin/env bash

path_base="$(cd "$(dirname "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")")" &>/dev/null && pwd -P)"
path_templates="${path_base}/templates"
path_repositories="${path_templates}/repositories"
repositories=($(ls "${path_repositories}"))
enable_git=0

if [ -s ~/.gitconfig ]; then
  enable_git=1
fi

usage() {
  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") type name

  Create a templated docker repository based on the given type

OPTIONS:

  -h, --help      Print this help and exit
  -l, --list      Print the list of supported repositories

EXAMPLES:

  $(basename "${BASH_SOURCE[0]}") debian my_project

  Creates a new docker-bbq repository named 'my_project' based on the default
  debian image (debian:buster-slim)

EOF
  exit
}

check_supported() {
  if [[ ! " ${repositories[*]} " =~ " $1 " ]]; then
    echo "Sorry, there is no template for $1"
    echo "How about starting with one of these templates:"
    for available_repo in ${repositories[*]}; do
      echo " ${available_repo}"
    done
    exit
  fi
}

if [[ $# -eq 0 ]]; then
  usage
fi

repository="$1"

check_supported "${repository}"

if [[ $# -eq 1 ]]; then
  echo "Please specify a name for the repository!"
fi

repo_name="$2"

if [[ -d "${repo_name}" ]]; then
  echo "Target directory '${repo_name}' already exists - aborting"
  exit 1
fi

# Load the components (contains arrays to use eval)
eval "$(cat "${path_repositories}/${repository}/default.sh")"

mkdir "${repo_name}"
if [ ${enable_git} ]; then
  printf "$(cd "${repo_name}" && git init > /dev/null)"
fi
mkdir "${repo_name}"/build
mkdir "${repo_name}"/workspace
touch "${repo_name}"/build/packagelist

# Generate the dockerfile from the components listed in the template
dockerfile=""
for component in ${dockerfile_componets[*]}; do
  if [[ " ${component} " =~ "/" ]]; then
    component_path="${path_repositories}/${component}"
  else
    component_path="${path_templates}/components/dockerfile/${component}"
  fi
  if [[ -s "${component_path}" ]]; then
    dockerfile+="$(cat "${component_path}" | sed '${/^$/d;}')"
    dockerfile+=$'\n'
  fi
done
echo "${dockerfile}" | head -c -1 > "${repo_name}/Dockerfile"

# Generate the makefile from the components listed in the template
makefile="BASE_IMAGE ?= ${repository}:${tag}"
makefile+=$'\n'
for component in ${makefile_componets[*]}; do
  if [[ " ${component} " =~ "/" ]]; then
    component_path="${path_repositories}/${component}"
  else
    component_path="${path_templates}/components/makefile/${component}"
  fi
  if [[ -s "${component_path}" ]]; then
    makefile+="$(cat "${component_path}" | sed '${/^$/d;}')"
    makefile+=$'\n'
  fi
done
echo "${makefile}" | head -c -1 > "${repo_name}/Makefile"

# Generate the makefile from the components listed in the template
readme=""
for component in ${readme_components[*]}; do
  if [[ "${component}" = "file-header" ]]; then
    readme+="# ${repo_name}"
  fi
  if [[ " ${component} " =~ "/" ]]; then
    component_path="${path_repositories}/${component}"
  else
    component_path="${path_templates}/components/readme/${component}"
  fi
  if [[ -s "${component_path}" ]]; then
    readme+=$'\n\n'
    readme+="$(cat "${component_path}")"
  fi
done
echo "${readme}" > "${repo_name}"/README.md

# Generate .dockerignore
cat ${path_templates}/components/dockerignore  > "${repo_name}"/.dockerignore
for component in ${dockerignore_entries[*]}; do
  echo "${component}" >> "${repo_name}"/.dockerignore
done

# Generate .gitignore
cat ${path_templates}/components/gitignore  > "${repo_name}"/.gitignore
for component in ${gitignore_entries[*]}; do
  echo "${component}" >> "${repo_name}"/.gitignore
done

# Create any directories and files as listed in the template
for directory in ${create_directories[*]}; do
  mkdir -p "${repo_name}/${directory}"
done

if [ ${enable_git} ]; then
  printf "$(cd "${repo_name}" && git add . && git commit --quiet --message "Add docker-bbq ${repository} template")"
fi
echo "Created ${repository} based docker-bbq repo '${repo_name}'"
