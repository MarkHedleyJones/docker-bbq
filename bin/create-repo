#!/usr/bin/env bash

path_base="$(cd "$(dirname "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")")" &>/dev/null && pwd -P)"
path_templates="${path_base}/templates"
path_repositories="${path_templates}/repositories"
repositories=($(ls "${path_repositories}"))
enable_git=1

usage() {
  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") type name

  Create a templated docker repository based on the given type

OPTIONS:

  -h, --help      Print this help and exit
  -l, --list      Print the list of supported repositories
  --no-git        To not setup the repository with git

EXAMPLES:

  $(basename "${BASH_SOURCE[0]}") debian my_project

  Creates a new docker-bbq repository named 'my_project' based on the default
  debian image (debian:buster-slim)

EOF
  exit
}

show_supported() {
  echo "How about starting with one of these templates:"
  for available_repo in ${repositories[*]}; do
    echo " ${available_repo}"
  done
}

check_supported() {
  if [[ ! " ${repositories[*]} " =~ " $1 " ]]; then
    echo "Sorry, there is no template for $1"
    show_supported
    exit 1
  fi
}

if [[ $# -eq 0 ]]; then
  usage
fi

for i in "$@"
do
case $i in
    --help|-h)
    usage
    ;;
    --list|-l)
    show_supported
    exit
    ;;
    --no-git)
    enable_git=0
    ;;
esac
done

repository="$1"

check_supported "${repository}"

if [[ $# -eq 1 ]]; then
  echo "Please specify a name for the repository!"
fi

repo_name="$2"

if [[ -d "${repo_name}" ]]; then
  echo "Target directory '${repo_name}' already exists - aborting"
  exit 1
fi

if [ "${enable_git}" == '1' ] && [ ! -s ~/.gitconfig ]; then
  echo ${repo_name}" will not be setup with git as ~/.gitconfig could not be found"
  enable_git=0
fi

# Load the components (contains arrays to use eval)
eval "$(cat "${path_repositories}/${repository}/default.sh")"

mkdir "${repo_name}"
if [ "${enable_git}" == '1' ]; then
  printf "$(cd "${repo_name}" && git init > /dev/null)"
fi
mkdir "${repo_name}"/build
mkdir "${repo_name}"/workspace
mkdir "${repo_name}"/build/resources
touch "${repo_name}"/build/packagelist

compile_file() {
  filetype=$1
  if [[ "${file}" != "" ]]; then
    file+=$'\n'
  fi
  eval "components=\"\${${filetype}_components[*]}\""
  for component in ${components}; do
    if [[ " ${component} " =~ "/" ]]; then
      component_path="${path_repositories}/${component}"
    else
      component_path="${path_templates}/components/${filetype}/${component}"
    fi
    if [[ -s "${component_path}" ]]; then
      file+="$(cat "${component_path}" | sed '${/^$/d;}')"
      file+=$'\n'
    fi
  done
}

file=""
compile_file "dockerfile"
echo "${file}" | head -c -1 > "${repo_name}/Dockerfile"

file="BASE_IMAGE ?= ${repository}:${tag}"
compile_file "makefile"
echo "${file}" | head -c -1 > "${repo_name}/Makefile"

file="# ${repo_name}"
compile_file "readme"
echo "${file}" | head -c -1 > "${repo_name}/README.md"

# Generate .dockerignore
cat ${path_templates}/components/dockerignore  > "${repo_name}"/.dockerignore
for component in ${dockerignore_entries[*]}; do
  echo "${component}" >> "${repo_name}"/.dockerignore
done

# Generate .gitignore
cat ${path_templates}/components/gitignore  > "${repo_name}"/.gitignore
for component in ${gitignore_entries[*]}; do
  echo "${component}" >> "${repo_name}"/.gitignore
done

# Create any directories and files as listed in the template
for directory in ${create_directories[*]}; do
  mkdir -p "${repo_name}/${directory}"
done

if [ "${enable_git}" == '1' ]; then
  printf "$(cd "${repo_name}" && git add . && git commit --quiet --message "Add docker-bbq ${repository} template")"
fi
echo "Created ${repository} based docker-bbq repo '${repo_name}'"
