#!/usr/bin/env bash

image=NULL

# Locate Dockerfile to determine image name
project_path=$(pwd)
while [[ ${project_path} != "/" ]]; do
    if [[ -f ${project_path}/Dockerfile ]]; then
        image=$(basename ${project_path})
        break
    fi
    project_path=$(dirname ${project_path})
done

local_path=$(pwd)
container_path=$(pwd | sed "s|${project_path}||")
if [[ "${container_path}" == "" ]]; then
  container_path="/"
fi

tag=latest
local_workspace=""
image_workspace=""
docker_args_workdir=""
docker_args_mount_workdir=""

# Has the user specified an image to use?
if [[ $# -ge 2 ]] &&  [[ "${1}" == "--image" ]]; then
    shift
    if [[ "${1}" =~ ":" ]]; then
        parts=(${1//:/ })
        image=${parts[0]}
        tag=${parts[1]}
    else
      image=${1}
    fi
    shift
    # Connect to the user's global workspace if it exists
    if [[ -d "/home/${USER}/workspace" ]]; then
        workspace_dirname="workspace"
        local_workspace="/${USER}/${workspace_dirname}"
        image_workspace="/${workspace_dirname}"
        docker_args_workdir=""
        docker_args_mount_workdir=""
        docker_args_workdir+="--workdir=${image_workspace} "
    else
        echo "Could not find a workspace under home directory to link..."
    fi
elif [[ ${image} == NULL ]]; then
    echo "Couldnt find a Dockerfile in this or any parent directory - aborting!"
    echo ""
    echo "TIP: You can specify an image using the --image <image name> switch"
    echo "Example: run --image debian:buster [command]"
    exit 1
else
    workspace_dirname="workspace"
    local_workspace="${project_path}/${workspace_dirname}"
    # If the repository contains a workspace folder, link it into the image
    if [[ -d ${local_workspace} ]]; then
      image_workspace="/${workspace_dirname}"
      if [[ "${container_path}" != "" ]]; then
          # Allow the user to execute commands with paths as if in the container
          docker_args_workdir+="--workdir=${container_path} "
      fi
    else
      echo "This repository does not contain a workspace folder - not linking"
    fi

fi

if [[ "${image_workspace}" != "" ]]; then
    # WORKDIR should be set inside the container, but just-in-case, set it again.
    # Allows scripts inside the container to easily locate the workspace
    docker_args_workdir+="--env WORKDIR=${image_workspace} "
fi

if [[ "${local_workspace}" != "" ]] && [[ "${image_workspace}" != "" ]]; then
    docker_args_mount_workdir="-v ${local_workspace}:${image_workspace} "
fi

docker_command="/usr/bin/env bash"
if [[ ${#} -gt 0 ]]; then
    docker_command="/usr/bin/env bash -cl \"$@\""
fi

if [[ ! $(docker ps --quiet --filter name=${image}) ]]; then
  echo "Running in new container (${image}:${tag})"

  docker_args_display=""
  if [[ ${DISPLAY} ]]; then
    xsock=/tmp/.X11-unix
    xauth=/tmp/.docker.xauth
    touch $xauth
    xauth nlist ${DISPLAY} | sed -e 's/^..../ffff/' | xauth -f ${xauth} nmerge -

    docker_args_display+="-e DISPLAY "
    docker_args_display+="-e XAUTHORITY=${xauth} "
    docker_args_display+="-v ${xauth}:${xauth}:rw "
    docker_args_display+="-v ${xsock}:${xsock}:rw "

    if command -v nvidia-smi > /dev/null; then
      # Enable Nvidia specific features
      docker_args_display+="--gpus=all "
      docker_args_display+="-e NVIDIA_DRIVER_CAPABILITIES=all "
      docker_args_display+="--env QT_X11_NO_MITSHM=1 "
    fi
  fi

  # Setup the user
  docker_args_user="--env GID=$(id -g) --env UID=$(id -u) "

  eval docker run \
      ${docker_args_interactive} \
      --name ${image}-${tag} \
      --rm \
      --privileged \
      --net=host \
      --interactive \
      --tty \
      ${docker_args_display} \
      ${docker_args_user} \
      ${docker_args_mount_workdir} \
      ${docker_args_workdir} \
      ${image}:${tag} \
      ${docker_command}

  if [[ ${image_workspace} != "" ]]; then
    # Recursively set permissions of workspace folder
    fix_permission_command="chown --recursive --from=\$(id -u):\$(id -g) "
    fix_permission_command+="$(id -u):$(id -g) ${image_workspace}"
    docker run \
        --rm \
        --entrypoint="" \
        ${docker_args_mount_workdir} \
        ${image}:${tag} \
        /usr/bin/env bash -c "${fix_permission_command}"
  fi
else
  echo "Running in existing container (${image}:${tag})"
  eval docker exec \
    --interactive \
    --tty \
    ${docker_args_workdir} \
    ${image} \
    ${docker_command}
fi
